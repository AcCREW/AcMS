<?php
/**
 * Recordset
 *
 */
class CRecordset implements Iterator
{
	var $RowData;
	var $ErrorText = null;
	var $Result;
	var $Query = null;
	var $EOF = false;
	
	/**
     * @return CRecordset
     * @param string $sQuery
     */
	public function CRecordset($sQuery){
		$this->RowData = array();
		$this->Query = $sQuery;
		$this->Result = mysqli_query(CDBConnection::GetInstance(), $sQuery, MYSQLI_STORE_RESULT);

		if(!$this->SelectColumns()){
			if(mysqli_error(CDBConnection::GetInstance())){
				$this->ErrorText = mysqli_errno(CDBConnection::GetInstance()) ." : ". mysqli_error(CDBConnection::GetInstance());
				show_error("MySQL Error ".$this->ErrorText." in Query : #". $this->Query ."#", E_USER_ERROR);
				$this->EOF = true;
			}
		}
	}
    
    private function SelectColumns(){
		if($this->Result !== false){
			if($this->ErrorText != ""){
				$this->EOF = true;
				return false;
			}
			if(!is_bool($this->Result)){
				$arTemp = mysqli_fetch_array($this->Result, MYSQLI_ASSOC);
				if(!is_array($arTemp)){
					$this->EOF = true;
					$this->RowData = array();
					if(mysqli_error(CDBConnection::GetInstance())) {
						$this->ErrorText = mysqli_errno(CDBConnection::GetInstance())." : ".mysqli_error(CDBConnection::GetInstance());
                    }
					return false;
				}else{
					$this->EOF = false;
					$this->RowData = $arTemp;
					return true;
				}
			}
		}
		return false;
	}
	
    public function current() {
        return $this->RowData;
    }

    public function key(){
        return '';
    }

    public function next(){
        $this->MoveNext();
    }

    public function valid() {
		return !$this->EOF;
    }
	
	public static function EscapeString($sString){
		return mysqli_real_escape_string(CDBConnection::GetInstance(), $sString);
	}
	
	public function __get($sProperty){
		if(isset($this->RowData[$sProperty]) && !$this->EOF && $this->ErrorText == "")
			return $this->RowData[$sProperty];
		return null;
	}
	
	public function __isset($sProperty){ 
		return isset($this->RowData[$sProperty]);
	}

	/**
     * @return bool
     * @desc Moves the internal cursor to the next row.
     */
	public function MoveNext(){
		if($this->EOF)
			return false;
		$this->SelectColumns();
		return true;
	}
	
	/**
     * @return bool
     * @desc Moves the internal cursor to the beginning of the resourse. Returns true on success and false on error.
     */
	public function Rewind(){
		$nRetVal = mysqli_data_seek($this->Result, 0);
		if(mysqli_error(CDBConnection::GetInstance())){
			$this->ErrorText = mysqli_errno(CDBConnection::GetInstance())." : ".mysqli_error(CDBConnection::GetInstance());
			$this->EOF = true;
		}else{
			$this->ErrorText = "";
			$this->EOF = false;
			$this->SelectColumns();
		}
		if($this->ErrorText != ""){
			show_error("MySQL Error ".$this->ErrorText." in Query :'".$this->Query."'", E_USER_ERROR);
            exit;
		}
		return $nRetVal;
	}
	
	/**
     * @return int
     * @desc Returns the number of rows in the reult.
     */
	public function NumRows(){
        $sErrorText = $this->ErrorText;
		if(empty($sErrorText))
			return mysqli_num_rows($this->Result);
		else
			return 0;
	}
	
	/**
     * @return int
     * @desc Returns the number of columns in the reult.
     */
	public function NumColumns(){
		return sizeof($this->RowData);
	}
	
	/**
     * Returns the column names as array
     * @return Array
     */
	public function GetColumnNames(){
		return (is_array($this->RowData)) ? array_keys($this->RowData) : Array();
	}

	/**
     * @return bool
     * @param string $sQuery
     * @desc Static. Executes an action query.
     */
	public static function Execute($sQuery){
		$bResult = mysqli_query(CDBConnection::GetInstance(), $sQuery, MYSQLI_STORE_RESULT);

		if(!$bResult){
			show_error("MySQL Error ".mysqli_errno(CDBConnection::GetInstance())." : ".mysqli_error(CDBConnection::GetInstance())." in Query :'".$sQuery."'", E_USER_ERROR);
			exit;
		}
		return $bResult;
	}
	
	public static function GetProccessListData(){
		$rsData = new CRecordset('SHOW FULL PROCESSLIST;');
		$sQueriesData = "";
		while(!$rsData->EOF){
			if($rsData->Command == "Query"){
				$sQueriesData .= 'time: '.$rsData->Time.'
info: '.$rsData->Info.'

';
			}
			$rsData->MoveNext();
		}
		return $sQueriesData;
	}

	/**
     * @return int
     * Static. Returns the id generated by the last executed INSERT statement.
     */
	public static function LastInsertedID(){
		return mysqli_insert_id(CDBConnection::GetInstance());
	}
	
	public static function GetAffectedRowsCount(){
		return mysqli_affected_rows(CDBConnection::GetInstance());
	}
}
